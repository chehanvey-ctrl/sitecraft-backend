import os
import base64
import hashlib
import re
import string
import random
from typing import Optional, List, Dict

import requests
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel

# ------------------------------------------------------------------------------
# Config
# ------------------------------------------------------------------------------

PORT = int(os.getenv("PORT", "8000"))
VERCEL_TOKEN = os.getenv("VERCEL_TOKEN", "").strip()

# Allowed origins for CORS
_default_origins = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://127.0.0.1:5500",
    "https://sitecraftai.net",
    "https://www.sitecraftai.net",
]
ALLOWED_ORIGINS = [
    o.strip()
    for o in os.getenv("ALLOWED_ORIGINS", "").split(",")
    if o.strip()
] or _default_origins

app = FastAPI(title="SiteCraft AI Backend", version="1.0.0")

app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS + ["null", "*"],  # "*" during testing; tighten later
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ------------------------------------------------------------------------------
# Models
# ------------------------------------------------------------------------------

class GenerateRequest(BaseModel):
    prompt: str

class GenerateResponse(BaseModel):
    html: str
    id: str

class PublishRequest(BaseModel):
    html: str
    projectName: Optional[str] = None  # optional human-friendly name

class PublishResponse(BaseModel):
    url: str
    deploymentId: Optional[str] = None

# ------------------------------------------------------------------------------
# Helpers
# ------------------------------------------------------------------------------

def slugify(text: str, fallback_len: int = 6) -> str:
    text = text.lower().strip()
    text = re.sub(r"[^a-z0-9\s-]", "", text)
    text = re.sub(r"[\s-]+", "-", text).strip("-")
    if not text:
        text = "sitecraft-generated-" + "".join(
            random.choice(string.ascii_lowercase + string.digits)
            for _ in range(fallback_len)
        )
    return text[:45]  # vercel name length guard

def simple_html_from_prompt(prompt: str) -> str:
    """Fallback HTML generator (no external API)."""
    title = prompt.split(".")[0].strip()
    if len(title) > 60:
        title = "Your Website"
    hero = prompt.strip().capitalize()

    return f"""<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>{title} • SiteCraft AI</title>
  <style>
    :root {{
      --bg1:#10b981; --bg2:#06b6d4; --ink:#0f172a; --muted:#334155; --card:#ffffff;
      --btn:#14b8a6; --btn-ink:#022c22;
    }}
    * {{ box-sizing:border-box; }}
    body {{
      margin:0; font:16px/1.6 system-ui,-apple-system,Segoe UI,Roboto,Ubuntu;
      color:var(--ink);
      background: radial-gradient(1200px 800px at 10% 10%, rgba(255,255,255,.25), transparent),
                  linear-gradient(135deg, var(--bg1), var(--bg2));
      min-height:100vh;
    }}
    header {{
      max-width:1100px; margin:0 auto; padding:56px 20px 24px;
      color:white;
    }}
    h1 {{ font-size:44px; margin:0 0 8px; letter-spacing:.4px; }}
    p.lead {{ font-size:18px; opacity:.95; margin:0 0 18px; }}
    main {{
      max-width:1100px; margin:0 auto; padding:0 20px 60px;
    }}
    .card {{
      background:var(--card); border-radius:20px; padding:28px;
      box-shadow:0 20px 45px rgba(2,6,23,.15);
      margin:18px 0;
    }}
    h2 {{ margin:0 0 10px; font-size:22px; }}
    .grid {{
      display:grid; grid-template-columns:repeat(auto-fit, minmax(260px,1fr)); gap:18px;
    }}
    .pill {{ display:inline-block; padding:10px 14px; border-radius:999px;
      background:rgba(20,184,166,.12); color:#064e3b; font-weight:600; margin-top:8px;
    }}
    footer {{ text-align:center; color:white; opacity:.85; padding:24px 16px 40px; }}
    a.btn {{
      display:inline-block; background:var(--btn); color:var(--btn-ink);
      padding:12px 18px; border-radius:12px; font-weight:700; text-decoration:none;
    }}
  </style>
</head>
<body>
  <header>
    <h1>{title}</h1>
    <p class="lead">{hero}</p>
    <a class="btn" href="#contact">Contact Us</a>
  </header>

  <main>
    <section class="card">
      <h2>Highlights</h2>
      <div class="grid">
        <div><strong>Fast.</strong> Built with love by SiteCraft AI.</div>
        <div><strong>Modern.</strong> Clean layout, great typography.</div>
        <div><strong>Responsive.</strong> Looks great on mobile.</div>
      </div>
      <span class="pill">Generated by SiteCraft AI</span>
    </section>

    <section id="about" class="card">
      <h2>About</h2>
      <p>Describe your services, story, or product here. Replace this text in the editor to make it your own.</p>
    </section>

    <section id="contact" class="card">
      <h2>Contact</h2>
      <p>Email: hello@example.com</p>
      <p>Address: Add your address here.</p>
    </section>
  </main>

  <footer>© {title} — Powered by SiteCraft AI</footer>
</body>
</html>
"""

def vercel_deploy_single_file(html: str, project_name: str) -> Dict:
    """
    Deploy a single-file static site to Vercel using the v13 deployments API.
    Returns the deployment JSON.
    """
    if not VERCEL_TOKEN:
        raise HTTPException(status_code=500, detail="VERCEL_TOKEN is not configured on the server.")

    # base64-encode content (safest for API)
    html_b64 = base64.b64encode(html.encode("utf-8")).decode("ascii")
    sha = hashlib.sha1(html.encode("utf-8")).hexdigest()

    payload = {
        "name": project_name,
        "target": "production",
        "files": [
            {
                "file": "index.html",
                "data": html_b64,
                "encoding": "base64",
                "sha": sha,
            }
        ],
        "projectSettings": {
            "framework": "other",
            "buildCommand": "",
            "outputDirectory": "",
        },
    }

    resp = requests.post(
        "https://api.vercel.com/v13/deployments",
        headers={
            "Authorization": f"Bearer {VERCEL_TOKEN}",
            "Content-Type": "application/json",
        },
        json=payload,
        timeout=60,
    )
    if resp.status_code >= 400:
        try:
            err = resp.json()
        except Exception:
            err = {"error": resp.text}
        raise HTTPException(status_code=500, detail={"vercel_error": err})

    return resp.json()

# ------------------------------------------------------------------------------
# Routes
# ------------------------------------------------------------------------------

@app.get("/", tags=["health"])
def health():
    return {"ok": True, "service": "sitecraft-backend", "version": "1.0.0"}

@app.post("/generate-html", response_model=GenerateResponse, tags=["generate"])
def generate_html(req: GenerateRequest):
    prompt = (req.prompt or "").strip()
    if not prompt:
        raise HTTPException(status_code=400, detail="Prompt is required.")

    # Try LLM if available (optional). We purposely keep a safe fallback.
    html = None
    api_key = os.getenv("OPENAI_API_KEY")
    if api_key:
        try:
            # Lazy import; if library mismatch, we'll fall back gracefully.
            try:
                from openai import OpenAI  # new SDK
                client = OpenAI(api_key=api_key)
                completion = client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[
                        {"role": "system", "content": "Generate clean, responsive, single-file HTML5 with inline CSS. No scripts unless necessary."},
                        {"role": "user", "content": f"Build a one-page website:\n{prompt}\n"}
                    ],
                    temperature=0.4,
                )
                html = completion.choices[0].message.content
            except Exception:
                import openai  # legacy SDK
                openai.api_key = api_key
                completion = openai.ChatCompletion.create(
                    model="gpt-4o-mini",
                    messages=[
                        {"role": "system", "content": "Generate clean, responsive, single-file HTML5 with inline CSS. No scripts unless necessary."},
                        {"role": "user", "content": f"Build a one-page website:\n{prompt}\n"}
                    ],
                    temperature=0.4,
                )
                html = completion["choices"][0]["message"]["content"]
        except Exception:
            html = None  # fall through to template

    if not html or "<html" not in html.lower():
        html = simple_html_from_prompt(prompt)

    return GenerateResponse(html=html, id=hashlib.sha1(html.encode("utf-8")).hexdigest()[:12])

@app.post("/publish-html", response_model=PublishResponse, tags=["publish"])
def publish_html(req: PublishRequest):
    html = (req.html or "").strip()
    if not html:
        raise HTTPException(status_code=400, detail="HTML is required.")

    name = slugify(req.projectName or "sitecraft-generated")
    deployment = vercel_deploy_single_file(html, name)

    # Vercel returns {"url": "my-project-abc123.vercel.app", "id": "...", ...}
    url = deployment.get("url")
    if not url:
        raise HTTPException(status_code=500, detail={"vercel_error": deployment})

    return PublishResponse(url=f"https://{url}", deploymentId=deployment.get("id"))
